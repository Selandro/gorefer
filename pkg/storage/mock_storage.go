// Code generated by MockGen. DO NOT EDIT.
// Source: C:\dev\projects\GOREFER\pkg\storage\storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// CreateReferralCode mocks base method.
func (m *MockDBInterface) CreateReferralCode(ctx context.Context, userID int, code string, expiresAt int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferralCode", ctx, userID, code, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferralCode indicates an expected call of CreateReferralCode.
func (mr *MockDBInterfaceMockRecorder) CreateReferralCode(ctx, userID, code, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferralCode", reflect.TypeOf((*MockDBInterface)(nil).CreateReferralCode), ctx, userID, code, expiresAt)
}

// CreateUser mocks base method.
func (m *MockDBInterface) CreateUser(ctx context.Context, user User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBInterfaceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBInterface)(nil).CreateUser), ctx, user)
}

// DeleteReferralCode mocks base method.
func (m *MockDBInterface) DeleteReferralCode(ctx context.Context, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReferralCode", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReferralCode indicates an expected call of DeleteReferralCode.
func (mr *MockDBInterfaceMockRecorder) DeleteReferralCode(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReferralCode", reflect.TypeOf((*MockDBInterface)(nil).DeleteReferralCode), ctx, userID)
}

// GetReferralCodeByEmail mocks base method.
func (m *MockDBInterface) GetReferralCodeByEmail(ctx context.Context, email string) (ReferralCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralCodeByEmail", ctx, email)
	ret0, _ := ret[0].(ReferralCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralCodeByEmail indicates an expected call of GetReferralCodeByEmail.
func (mr *MockDBInterfaceMockRecorder) GetReferralCodeByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralCodeByEmail", reflect.TypeOf((*MockDBInterface)(nil).GetReferralCodeByEmail), ctx, email)
}

// GetReferralsByReferrerID mocks base method.
func (m *MockDBInterface) GetReferralsByReferrerID(ctx context.Context, referrerID int) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralsByReferrerID", ctx, referrerID)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralsByReferrerID indicates an expected call of GetReferralsByReferrerID.
func (mr *MockDBInterfaceMockRecorder) GetReferralsByReferrerID(ctx, referrerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralsByReferrerID", reflect.TypeOf((*MockDBInterface)(nil).GetReferralsByReferrerID), ctx, referrerID)
}

// GetUserByEmail mocks base method.
func (m *MockDBInterface) GetUserByEmail(ctx context.Context, email string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBInterfaceMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDBInterface)(nil).GetUserByEmail), ctx, email)
}

// RegisterWithReferralCode mocks base method.
func (m *MockDBInterface) RegisterWithReferralCode(ctx context.Context, referralCode string, user User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWithReferralCode", ctx, referralCode, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterWithReferralCode indicates an expected call of RegisterWithReferralCode.
func (mr *MockDBInterfaceMockRecorder) RegisterWithReferralCode(ctx, referralCode, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWithReferralCode", reflect.TypeOf((*MockDBInterface)(nil).RegisterWithReferralCode), ctx, referralCode, user)
}
